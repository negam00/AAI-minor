{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python361064bitvenvvenv5eba11c5464f498aa02def0463a2bae0",
   "display_name": "Python 3.6.10 64-bit ('venv': venv)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from keras.models import Sequential\n",
    "from keras.models import model_from_yaml\n",
    "from keras.models import load_model\n",
    "from keras.layers import LSTM, Dense, Activation, GRU\n",
    "from keras.callbacks import ModelCheckpoint\n",
    "from random import randint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Model: \"sequential_2\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nlstm_2 (LSTM)                (None, 128)               86528     \n_________________________________________________________________\ndense_2 (Dense)              (None, 40)                5160      \n_________________________________________________________________\nactivation_2 (Activation)    (None, 40)                0         \n=================================================================\nTotal params: 91,688\nTrainable params: 91,688\nNon-trainable params: 0\n_________________________________________________________________\n"
    }
   ],
   "source": [
    "with open(r'model.yaml', 'r') as model_file:\n",
    "    loaded_model = model_from_yaml(model_file)\n",
    "# Model =y\n",
    "loaded_model.load_weights('weights-20.hdf5')\n",
    "loaded_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Loaded a corpus of 4787 characters\n"
    }
   ],
   "source": [
    "with open(r\"hazes.txt\") as corpus_file:\n",
    "    corpus = corpus_file.read()\n",
    "    corpus = corpus.lower()\n",
    "print(\"Loaded a corpus of {0} characters\".format(len(corpus)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "loaded_model.compile(loss='categorical_crossentropy', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_seed(seed_phrase=\"\"):\n",
    "    if seed_phrase:\n",
    "        phrase_length = len(seed_phrase)\n",
    "        pattern = ''\n",
    "        for i in range(0, sentance_length):\n",
    "            pattern += seed_phrase(1 % phrase_length)\n",
    "\n",
    "    else:\n",
    "        seed = np.random.randint(0, len(corpus) - sentence_length)\n",
    "        pattern = corpus[seed:seed + sentence_length]\n",
    "\n",
    "    return pattern"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generated(seed_pattern):\n",
    "    X = np.zeros((1, sentence_length, num_chars), dtype=np.bool)\n",
    "    print(X.shape)\n",
    "    for i, character in enumerate(seed_pattern):\n",
    "        X[0,i, encoding[character]] = 1\n",
    "\n",
    "    generated_text = \" \"\n",
    "    for i in range(500):\n",
    "        prediction = np.argmax(loaded_model.predict(X, verbose=0))\n",
    "\n",
    "        generated_text += decoding[prediction]\n",
    "        activations = np.zeros((1,1,num_chars),dtype = np.bool)\n",
    "        activations[0,0,prediction] = 1\n",
    "        X = np.concatenate((X[:,1:,:], activations), axis=1)\n",
    "\n",
    "    return generated_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_seed(seed_phrase=''):\n",
    "    if seed_phrase:\n",
    "        phrase_length = len(seed_phrase)\n",
    "        pattern = \"\"\n",
    "        for i in range(0, sentence_length):\n",
    "            pattern+=seed_phrase[i%phrase_length]\n",
    "    else:\n",
    "        seed= randint(0, len(corpus)-sentence_length)\n",
    "        pattern=corpus[seed:seed+sentence_length]\n",
    "    return pattern"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "['\\n', ' ', '!', '\"', \"'\", '(', ')', '*', ',', '.', '?', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '\\u2005', 'â€“', 'â€”', 'â€™']\nOur corpus contains 40 unique characters.\n{'\\n': 0, ' ': 1, '!': 2, '\"': 3, \"'\": 4, '(': 5, ')': 6, '*': 7, ',': 8, '.': 9, '?': 10, 'a': 11, 'b': 12, 'c': 13, 'd': 14, 'e': 15, 'f': 16, 'g': 17, 'h': 18, 'i': 19, 'j': 20, 'k': 21, 'l': 22, 'm': 23, 'n': 24, 'o': 25, 'p': 26, 'r': 27, 's': 28, 't': 29, 'u': 30, 'v': 31, 'w': 32, 'x': 33, 'y': 34, 'z': 35, '\\u2005': 36, 'â€“': 37, 'â€”': 38, 'â€™': 39}\n(1, 20, 40)\ns are dead\n\n\n(yuh, a y i soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll soll s\n"
    }
   ],
   "source": [
    "chars = sorted(list(set(corpus)))\n",
    "num_chars = len(chars)\n",
    "encoding = {c: i for i, c in enumerate(chars)}\n",
    "decoding = {i: c for i, c in enumerate(chars)}\n",
    "\n",
    "print(chars)\n",
    "print(\"Our corpus contains {0} unique characters.\".format(num_chars))\n",
    "print(encoding)\n",
    "\n",
    "sentence_length = 20\n",
    "seed = make_seed()\n",
    "gen = generated(seed)\n",
    "print(seed + gen)\n",
    "exit(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "e\n"
    }
   ],
   "source": [
    "letters = string.ascii_lowercase\n",
    "result_str = ''.join(random.choice(letters) for i in range(1))\n",
    "print(result_str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "output_type": "error",
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-146-67469d0bc7cf>, line 1)",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-146-67469d0bc7cf>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    X =\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "X = \n",
    "model.predict(X)\n",
    "X = np.zers()\n",
    "sentence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "output_type": "error",
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-147-98ba1dd1d01c>, line 3)",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-147-98ba1dd1d01c>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    reutrn np.argmax(preds)\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def sample(preds, temperature=1.0):\n",
    "    if temperature <= 0:\n",
    "        reutrn np.argmax(preds)\n",
    "    "
   ]
  }
 ]
}